{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.1",
    "parameters": {
      "moduleCreateLoadBalancers": {
        "type": "object"
      },
      "customTages": {
        "type": "object"
      },
      "suffixes" : {
        "type": "object"
      }
    },
    "variables": {
      "defaultLocation": "[resourceGroup().location]"
    },
    "resources": [
        {
            "copy" : {
                    "name": "loadBalancers",
                    "count": "[length(parameters('moduleCreateLoadBalancers').loadbalancers)]"
            },
            "type": "Microsoft.Network/loadBalancers",
            "comments": "Module to create one or more Load Balancers",
            "apiVersion": "2018-08-01",
            "name": "[toLower(concat(parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].lbName,parameters('suffixes').extLoadbalancerSuffix))]",
            "tags": "[parameters('customTages')]",
            "location": "[if(equals(parameters('moduleCreateLoadBalancers').location, json('null')), variables('defaultLocation'), parameters('moduleCreateLoadBalancers').location)]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].frontendIPConfigurationsName",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].nameOfExistingPublicIPAddress)]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].backendAddressPoolName"
                    }
                ],

                "copy": [
                    {
                        "name": "probes",
                        "count": "[length(parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].probes)]",
                        "input": {
                            "name": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].probes[copyIndex('probes')].probename",
                            "properties": {
                                "protocol": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].probes[copyIndex('probes')].protocol",
                                "port": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].probes[copyIndex('probes')].port",
                                "intervalInSeconds": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].probes[copyIndex('probes')].internvalInSeconds",
                                "numberOfProbes": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].probes[copyIndex('probes')].numberOfProbes"
                            }
                        }
                    }
                ],

                "copy": [
                    {
                        "name": "inboundNatRules",
                        "count": "[length(parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].inboundNatRules)]",
                        "input": {
                            "name": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].inboundNatRules[copyIndex('inboundNatRules')].name",
                            "properties": {
                                "frontendIPConfiguration": {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers',parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].lbName),'/frontendIPConfigurations/',parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].frontendIPConfigurationsName)]"
                                },
                                "protocol": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].inboundNatRules[copyIndex('inboundNatRules')].protocol",
                                "frontendPort": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].inboundNatRules[copyIndex('inboundNatRules')].frontendPort",
                                "backendPort": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].inboundNatRules[copyIndex('inboundNatRules')].backendPort",
                                "enableFloatingIP": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].inboundNatRules[copyIndex('inboundNatRules')].enableFloatingIP"
                            }
                        }
                    }
                ],

                "copy": [
                    {
                        "name": "loadBalancingRules",
                        "count": "[length(parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].loadBalancingRules)]",
                        "input": {
                            "name": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].loadBalancingRules[copyIndex('loadBalancingRules')].name",
                            "properties": {
                                "frontendIPConfiguration": {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers',parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].lbName),'/frontendIPConfigurations/',parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].frontendIPConfigurationsName)]"
                                },
                                "backendAddressPool": {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers',parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].lbName),'/backendAddressPools/',parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].backendAddressPoolName)]"
                                },
                                "protocol": "parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].loadBalancingRules[copyIndex('loadBalancingRules')].protocol",
                                "frontendPort": "int(parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].loadBalancingRules[copyIndex('loadBalancingRules')].frontendPort)",
                                "backendPort": "int(parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].loadBalancingRules[copyIndex('loadBalancingRules')].backendPort)",
                                "enableFloatingIP": "boolean(parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].loadBalancingRules[copyIndex('loadBalancingRules')].enableFloatingIP)",
                                "idleTimeoutInMinutes": "int(parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].loadBalancingRules[copyIndex('loadBalancingRules')].idleTimeoutInMinutes)",
                                "probe": {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers',parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].lbName),'/probes/',parameters('moduleCreateLoadBalancers').loadbalancers[copyIndex('loadBalancers')].loadBalancingRules[copyIndex('loadBalancingRules')].probeName)]"
                                }
                            }
                        }
                        
                    }   
                ]

            }
        }
    ], 
    "outputs": {
    }
}

